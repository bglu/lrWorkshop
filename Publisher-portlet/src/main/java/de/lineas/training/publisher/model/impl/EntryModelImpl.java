package de.lineas.training.publisher.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.lineas.training.publisher.model.Entry;
import de.lineas.training.publisher.model.EntryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Entry service. Represents a row in the &quot;PUB_Entry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.lineas.training.publisher.model.EntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntryImpl
 * @see de.lineas.training.publisher.model.Entry
 * @see de.lineas.training.publisher.model.EntryModel
 * @generated
 */
public class EntryModelImpl extends BaseModelImpl<Entry> implements EntryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a entry model instance should use the {@link de.lineas.training.publisher.model.Entry} interface instead.
     */
    public static final String TABLE_NAME = "PUB_Entry";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "entryId", Types.BIGINT },
            { "txt", Types.VARCHAR },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table PUB_Entry (uuid_ VARCHAR(75) null,entryId LONG not null primary key,txt VARCHAR(75) null,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table PUB_Entry";
    public static final String ORDER_BY_JPQL = " ORDER BY entry.entryId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PUB_Entry.entryId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.lineas.training.publisher.model.Entry"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.lineas.training.publisher.model.Entry"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.lineas.training.publisher.model.Entry"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static long ENTRYID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.lineas.training.publisher.model.Entry"));
    private static ClassLoader _classLoader = Entry.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Entry.class };
    private String _uuid;
    private String _originalUuid;
    private long _entryId;
    private String _txt;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _columnBitmask;
    private Entry _escapedModel;

    public EntryModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _entryId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEntryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _entryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Entry.class;
    }

    @Override
    public String getModelClassName() {
        return Entry.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("entryId", getEntryId());
        attributes.put("txt", getTxt());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long entryId = (Long) attributes.get("entryId");

        if (entryId != null) {
            setEntryId(entryId);
        }

        String txt = (String) attributes.get("txt");

        if (txt != null) {
            setTxt(txt);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getEntryId() {
        return _entryId;
    }

    @Override
    public void setEntryId(long entryId) {
        _entryId = entryId;
    }

    @Override
    public String getTxt() {
        if (_txt == null) {
            return StringPool.BLANK;
        } else {
            return _txt;
        }
    }

    @Override
    public void setTxt(String txt) {
        _txt = txt;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Entry.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Entry toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Entry) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntryImpl entryImpl = new EntryImpl();

        entryImpl.setUuid(getUuid());
        entryImpl.setEntryId(getEntryId());
        entryImpl.setTxt(getTxt());
        entryImpl.setGroupId(getGroupId());

        entryImpl.resetOriginalValues();

        return entryImpl;
    }

    @Override
    public int compareTo(Entry entry) {
        long primaryKey = entry.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Entry)) {
            return false;
        }

        Entry entry = (Entry) obj;

        long primaryKey = entry.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntryModelImpl entryModelImpl = this;

        entryModelImpl._originalUuid = entryModelImpl._uuid;

        entryModelImpl._originalGroupId = entryModelImpl._groupId;

        entryModelImpl._setOriginalGroupId = false;

        entryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Entry> toCacheModel() {
        EntryCacheModel entryCacheModel = new EntryCacheModel();

        entryCacheModel.uuid = getUuid();

        String uuid = entryCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            entryCacheModel.uuid = null;
        }

        entryCacheModel.entryId = getEntryId();

        entryCacheModel.txt = getTxt();

        String txt = entryCacheModel.txt;

        if ((txt != null) && (txt.length() == 0)) {
            entryCacheModel.txt = null;
        }

        entryCacheModel.groupId = getGroupId();

        return entryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", entryId=");
        sb.append(getEntryId());
        sb.append(", txt=");
        sb.append(getTxt());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("de.lineas.training.publisher.model.Entry");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entryId</column-name><column-value><![CDATA[");
        sb.append(getEntryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>txt</column-name><column-value><![CDATA[");
        sb.append(getTxt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
