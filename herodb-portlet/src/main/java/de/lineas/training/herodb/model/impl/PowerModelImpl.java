package de.lineas.training.herodb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.lineas.training.herodb.model.Power;
import de.lineas.training.herodb.model.PowerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Power service. Represents a row in the &quot;hero_Power&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.lineas.training.herodb.model.PowerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PowerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PowerImpl
 * @see de.lineas.training.herodb.model.Power
 * @see de.lineas.training.herodb.model.PowerModel
 * @generated
 */
public class PowerModelImpl extends BaseModelImpl<Power> implements PowerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a power model instance should use the {@link de.lineas.training.herodb.model.Power} interface instead.
     */
    public static final String TABLE_NAME = "hero_Power";
    public static final Object[][] TABLE_COLUMNS = {
            { "PowerId", Types.BIGINT },
            { "PowerName", Types.VARCHAR },
            { "PowerDescription", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table hero_Power (PowerId LONG not null primary key,PowerName VARCHAR(75) null,PowerDescription VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table hero_Power";
    public static final String ORDER_BY_JPQL = " ORDER BY power.PowerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY hero_Power.PowerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.lineas.training.herodb.model.Power"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.lineas.training.herodb.model.Power"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.lineas.training.herodb.model.Power"));
    private static ClassLoader _classLoader = Power.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Power.class };
    private long _PowerId;
    private String _PowerName;
    private String _PowerDescription;
    private Power _escapedModel;

    public PowerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _PowerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPowerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _PowerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Power.class;
    }

    @Override
    public String getModelClassName() {
        return Power.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("PowerId", getPowerId());
        attributes.put("PowerName", getPowerName());
        attributes.put("PowerDescription", getPowerDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long PowerId = (Long) attributes.get("PowerId");

        if (PowerId != null) {
            setPowerId(PowerId);
        }

        String PowerName = (String) attributes.get("PowerName");

        if (PowerName != null) {
            setPowerName(PowerName);
        }

        String PowerDescription = (String) attributes.get("PowerDescription");

        if (PowerDescription != null) {
            setPowerDescription(PowerDescription);
        }
    }

    @Override
    public long getPowerId() {
        return _PowerId;
    }

    @Override
    public void setPowerId(long PowerId) {
        _PowerId = PowerId;
    }

    @Override
    public String getPowerName() {
        if (_PowerName == null) {
            return StringPool.BLANK;
        } else {
            return _PowerName;
        }
    }

    @Override
    public void setPowerName(String PowerName) {
        _PowerName = PowerName;
    }

    @Override
    public String getPowerDescription() {
        if (_PowerDescription == null) {
            return StringPool.BLANK;
        } else {
            return _PowerDescription;
        }
    }

    @Override
    public void setPowerDescription(String PowerDescription) {
        _PowerDescription = PowerDescription;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Power.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Power toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Power) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PowerImpl powerImpl = new PowerImpl();

        powerImpl.setPowerId(getPowerId());
        powerImpl.setPowerName(getPowerName());
        powerImpl.setPowerDescription(getPowerDescription());

        powerImpl.resetOriginalValues();

        return powerImpl;
    }

    @Override
    public int compareTo(Power power) {
        long primaryKey = power.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Power)) {
            return false;
        }

        Power power = (Power) obj;

        long primaryKey = power.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Power> toCacheModel() {
        PowerCacheModel powerCacheModel = new PowerCacheModel();

        powerCacheModel.PowerId = getPowerId();

        powerCacheModel.PowerName = getPowerName();

        String PowerName = powerCacheModel.PowerName;

        if ((PowerName != null) && (PowerName.length() == 0)) {
            powerCacheModel.PowerName = null;
        }

        powerCacheModel.PowerDescription = getPowerDescription();

        String PowerDescription = powerCacheModel.PowerDescription;

        if ((PowerDescription != null) && (PowerDescription.length() == 0)) {
            powerCacheModel.PowerDescription = null;
        }

        return powerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{PowerId=");
        sb.append(getPowerId());
        sb.append(", PowerName=");
        sb.append(getPowerName());
        sb.append(", PowerDescription=");
        sb.append(getPowerDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("de.lineas.training.herodb.model.Power");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>PowerId</column-name><column-value><![CDATA[");
        sb.append(getPowerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PowerName</column-name><column-value><![CDATA[");
        sb.append(getPowerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>PowerDescription</column-name><column-value><![CDATA[");
        sb.append(getPowerDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
